security:
    role_hierarchy:
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_ADMIN: [ ROLE_PRIME, TICKET_MANAGE, MANAGE, ROLE_SPECIAL_MEMBER, ROLE_MOD ]
        ROLE_MOD: [ ROLE_PRIME, ROLE_MOD ]
        ROLE_PRIME: [ ROLE_USER, ROLE_PRIME ]
        ROLE_VIP: [ ROLE_USER, ROLE_PRIME ]
        ROLE_FRAU: [ ROLE_USER, ROLE_PRIME ]
        ROLE_SPECIAL_MEMBER: [ ROLE_MEMBER, ROLE_SPECIAL_MEMBER ]
        ROLE_MEMBER: [ ROLE_USER, ROLE_MEMBER ]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout

            remember_me:
              secret: '%kernel.secret%'
              lifetime: 604800
              path: /
              # always_remember_me: true
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
        switch_user: true
        image_resolver:
            pattern: ^/media/cache/resolve
            security: false
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
